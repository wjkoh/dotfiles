source /usr/share/vim/google/google.vim

" Load the code formatting plugin. We first load the open-source version. Then,
" we load the internal google settings. Then, we automatically enable formatting
" when we write the file for Go, BUILD, proto, and c/cpp files.
" Use :h codefmt-google or :h codefmt for more details.
" Glug codefmt
Glug codefmt-google

" Wrap autocmds inside an augroup to protect against reloading this script.
" For more details, see:
" http://learnvimscriptthehardway.stevelosh.com/chapters/14.html
augroup autoformat_settings
  autocmd!
  autocmd FileType borg,gcl,patchpanel AutoFormatBuffer gclfmt
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType jslayout AutoFormatBuffer jslfmt
  autocmd FileType markdown AutoFormatBuffer mdformat
  autocmd FileType ncl AutoFormatBuffer nclfmt
  autocmd FileType python AutoFormatBuffer pyformat
  autocmd FileType textpb AutoFormatBuffer text-proto-format
  autocmd FileType html,css,json AutoFormatBuffer js-beautify
augroup END

"------------------------------------------------------------
" Autocommands. augroup and autocmd! are necessary. See
" https://superuser.com/a/634037 for details.
augroup WjkohGoogleAutocommands
  autocmd!
  " if executable('/google/bin/releases/grok/tools/kythe_languageserver')
  "   au User lsp_setup call lsp#register_server({
  "         \ 'name': 'Kythe Language Server',
  "         \ 'cmd': {server_info->['/google/bin/releases/grok/tools/kythe_languageserver', '--google3']},
  "         \ 'whitelist': ['python', 'go', 'java', 'cpp', 'proto'],
  "         \})
  " endif
  " if executable('/google/bin/releases/editor-devtools/ciderlsp')
  "   au User lsp_setup call lsp#register_server({
  "         \ 'name': 'CiderLSP',
  "         \ 'cmd': {server_info->[
  "         \   '/google/bin/releases/editor-devtools/ciderlsp',
  "         \   '--tooltag=vim-lsp',
  "         \   '--noforward_sync_responses',
  "         \ ]},
  "         \ 'whitelist': ['c', 'cpp', 'proto', 'textproto', 'go'],
  "         \})
  " endif
augroup END

function! FixPyImportOrder()
  let save_pos = getpos('.')
  silent %!/google/bin/releases/python-team/public/importorder --reformat_imports --filein %
  call setpos('.', save_pos)
endfunction
command FixPyImportOrder call FixPyImportOrder()

augroup PythonFixImports
  " Reset the Isort autocommand in .vimrc.
  autocmd!
  autocmd BufWritePre *.py FixPyImportOrder
augroup END

" clang-include-fixer: Query mode.
Glug blazedeps plugin[mappings]
nnoremap <leader>qf :let g:clang_include_fixer_query_mode=1<CR>:pyf /usr/lib/clang-include-fixer/clang-include-fixer.py<CR>:w<CR>:BlazeDepsUpdate<CR>

" Load the Related Files plugin. Use :h relatedfiles for more details.
" The default mapping to run :RelatedFilesWindow is <Leader>r. Thus, <Leader>r
" -> b: BUILD file, t: test file, c: source file, h: header file, and so on.
Glug relatedfiles plugin[mappings] window_position="topleft"
