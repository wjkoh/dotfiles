# Google-specific configurations. See
# https://g3doc.corp.google.com/devtools/piper/g3doc/fig/user/customization.md?cl=head.
[color]
desc.here = red bold
changeset.remaining = bold black

[experimental]
graphshorten = True

[google]
changes.autoresolve = true

[google_hgext]
pickcheckout.enable_curses_ui = true

[templatealias]
google_compact_desc_text = '{if(outsidenarrow,"", desc|firstline)}'

[alias]
# See go/pappysfigconfig.
watch = !HGPLAINEXCEPT=alias,color,revsetalias,templatealias,i18n,graph watch -t -n 5 --color "echo $'\n\e[4mUncommitted Changes\e[0m' && hg st --color=always $(hg root) && echo && hg xl --color=always --config=extensions.blackbox=!"

print_cl = exportedcl

# Note that p4head isn't always the ancestor of the given revision. zuse p4base.
changed = status --rev p4base --template "{relpath(path)}\n"
added = changed --added

# Use rabbit instead of blaze to unblock other blaze runs.
test = !$HG rabbit -r chain -- test $($HG affected_tests)

# Gets all targets affected by the changed files in Hg/Fig. Note that you need
# to run this at the repo root directory. For example, run `g4d` or `hgd`.
# Example:
#   $ sudo apt install hashbang-tap
#   $ iblaze test $(hg affected_tests)
#   $ iblaze build $(hg affected_bins_libs)
# Or, use /google/bin/releases/tap-prod/public/depends_on.par.
# touch ~/.hbsuppresstips
affected_bins_libs = !hb depends_on --filter_type binaries,libraries --direct --short $($HG changed --cwd $($HG hgd))
affected_tests = !hb depends_on --filter_type tests --direct --short $($HG affected_bins_libs)
# maybe_added_tests = !$HG added --cwd $($HG hgd) | sed '/_test.\(py\|cc\)$/!d' | sed 's/.\(py\|cc\)$//'

# See the [hooks] section as well.
mamend = $HG amend "$@" && $HG uploadchain && $HG test
mcommit = $HG commit "$@" && $HG test
msubmit = REVISION=$($HG print_rev) && echo -e "\e[1mYou may now check out another revision.\e[21m" && $HG test && $HG submit --rev $REVISION && $HG sync --rev $REVISION

[nointerrupt]
# Stops the "don't interrupt Mercurial" message when Ctrl-C'ing the "watch"
# command.
attend-watch=False

[hooks]
# `precommit` hook (without a -) is a "operation" hook and `pre-commit` (with
# the -) is a "command" hook.
# https://groups.google.com/a/google.com/g/fig-users/c/vXUY7VmACxY/m/3oZABaaeDAAJ.
# pre-commit.fixwdir = $HG fixwdir
# pre-commit.lint = $HG lint --working-dir
# pre-amend.fixwdir = $HG fixwdir
# pre-amend.lint = $HG lint --working-dir
# pre-submit.fixdot = $HG fixdot
# pre-submit.lint = $HG lint --rev .
